import logging
from datetime import datetime
import telegram
from telegram.ext import CommandHandler, MessageHandler, Filters, Updater

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

# Define a command handler that sets a reminder
def set_reminder(update, context):
    # Get the date and time specified in the message
    reminder_time = datetime.strptime(context.args[0], '%Y-%m-%d %H:%M')
    
    # Get the text of the reminder message from the message body
    reminder_text = ' '.join(context.args[1:])
    
    # Schedule the reminder to be sent at the specified time
    job_queue = context.job_queue
    job = job_queue.run_once(send_reminder, reminder_time, context=[update.message.chat_id, reminder_text])
    context.chat_data['job'] = job
    
    # Send a confirmation message
    update.message.reply_text('Reminder set for {}.'.format(reminder_time))

# Define a message handler that cancels a reminder
def cancel_reminder(update, context):
    if 'job' not in context.chat_data:
        update.message.reply_text('You have no active reminders.')
        return
    job = context.chat_data['job']
    job.schedule_removal()
    del context.chat_data['job']
    update.message.reply_text('Reminder cancelled.')

# Define a function that sends the reminder message
def send_reminder(context):
    chat_id, reminder_text = context.job.context
    bot = context.bot
    bot.send_message(chat_id=chat_id, text=reminder_text)
